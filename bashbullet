#!/bin/bash

# Bashbullet	: a simple pushbullet notification daemon for linux users written in bash
# Author	: Boteium - https://github.com/Boteium
# Description	: notifications are displayed through notify-osd.
# 		  received pushes would be saved at ~/.pushbullet/received with timestamp and type of push as filename

if ! ps -o stat= -p $$ |grep + >/dev/null;then
notify-send Warning "Bashbullet is running in the background
Make sure to start it by screen/systemd/upstart or it will not work
e.g. screen -S bashbullet-session -dm ./bashbullet"
fi

# API_KEY Configration file
[ ! -x ~/.bashbullet/received/archived ] && mkdir -p ~/.bashbullet/received/archived
if [ -f ~/.bashbullet/config ];then
	source ~/.bashbullet/config
else
	echo please put your API_KEY=\"your_key\" in ~/.bashbullet/config
	exit 0
fi

# initialize yad systray icon
export PIPE=`mktemp -u --tmpdir ${0##*/}.XXXXXXXX`
mkfifo $PIPE

# attach a file descriptor to the file
exec 3<> $PIPE

# add handler to manage process shutdown
on_exit() {
    echo "quit" >&3
    rm -f $PIPE
}
trap on_exit EXIT

new_push(){
	IFS='
'
	source ~/.bashbullet/config
        DEVS_RAW=`curl -s --header "Authorization: Bearer $API_KEY" https://api.pushbullet.com/v2/devices`
        DEVS=(`jshon -e devices <<< "$DEVS_RAW"|grep \"nickname\"|cut -d \" -f4`)
        IDEN=(`jshon -e devices <<< "$DEVS_RAW"|grep \"iden\"|cut -d \" -f4`)
        PU(){
		if curl -s "https://api.pushbullet.com/v2/pushes" \
                 -u "$API_KEY": -d device_iden="$1" -d type="$2" -d title="$3" \
                 --data-urlencode body="`printf $4`" -X POST |\
		grep 'active":true' >/dev/null;then notify-send "pushed";fi
		# use printf to translate \n to newline
        }
        decode_identity(){
                for(( i=0 ; i<${#IDEN[@]} ; i++ ));do
                        if [ "$1" == "${DEVS[$i]}" ];then
                                echo "${IDEN[$i]}"
                                return 0;
                        fi
                done
        }
        DEVICES=`for i in ${DEVS[@]};do echo -n \;$i;done|cut -c 2-`

        IFS='|'
        NOTE=(`yad --form --height=300 \
              --field="Device":CB "${DEVICES}" \
              --field="Title" "" --field="Note":TXT "" --item-separator=';' \
              --button="Discard:1" --button="Push it:2"`)
        if [ $? == 2 ];then
                [ -z ${NOTE[1]} ] && NOTE[1]="untitled"
                PU `decode_identity "${NOTE[0]}"`  note "${NOTE[1]}" "${NOTE[2]}"
        fi
}
export -f new_push
# add handler for tray icon left click
on_click() {
	YADKEY=${RANDOM}
	if [ `find ${HOME}/.bashbullet/received/*_* 2>/dev/null|wc -l` == 0 ];then
		echo "No new messages" > ${HOME}/.bashbullet/.disp_tmp
	else
		cat ${HOME}/.bashbullet/received/*_* > ${HOME}/.bashbullet/.disp_tmp
	fi
	if [ `find ${HOME}/.bashbullet/received/archived/* 2>/dev/null|wc -l` == 0 ];then
		echo "No archived messages" > ${HOME}/.bashbullet/.arch_tmp
	else
		cat ${HOME}/.bashbullet/received/archived/* > ${HOME}/.bashbullet/.arch_tmp
	fi

	yad --plug=$YADKEY --tabnum=1 --text-info --filename=${HOME}/.bashbullet/.disp_tmp &
	yad --plug=$YADKEY --tabnum=2 --text-info --filename=${HOME}/.bashbullet/.arch_tmp &

	yad --mouse --notebook --key=$YADKEY --width=600 --height=400 --title "Bashbullet Inbox" \
		--window-icon="${DIR}/pushbullet.svg" --tab="New Messages" --tab="Archived Messages" --title "Bashbullet Inbox" \
		--button "Close:1" --button "Mark all as read:2" --button "Archive all:3" --button "New push:4"
	case  $? in
		2)
		echo icon:"${DIR}/pushbullet.svg" > ${PIPE} ;;
		3)
		mv ${HOME}/.bashbullet/received/*_* ${HOME}/.bashbullet/received/archived/
		echo icon:"${DIR}/pushbullet.svg" > ${PIPE} ;;
		4)
		new_push
		;;
	esac
}
export -f on_click

export DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

# create the notification icon

yad --notification                  \
    --title bashbullet \
    --listen                        \
    --image="$DIR/pushbullet.svg"              \
    --text="click to display new message"   \
    --command="bash -c \"on_click\"" <&3 &

IFS='
'
[ -z $DISPLAY ] && DISPLAY=:0

# Pushbullet api url
CL(){   curl -s --header "Authorization: Bearer $API_KEY" https://api.pushbullet.com/v2/${1} ;}

# Convert device id to name
decode_name(){
	for(( i=0 ; i<${#DEVS[@]} ; i++ ));do
		if [ $1 == ${IDEN[$i]} ];then
			echo "${DEVS[$i]}"
			return 0;
		fi
	done
}

# extract push from json
j_push(){ jshon -e pushes -e $@ <<< "$RAWMSG" ;}

# notify-send and save
disp_save(){
	TO=`jshon -e pushes -e $ENTRY -e target_device_iden <<< "$RAWMSG" 2>/dev/null|tr -d \"`
	if [ -z $TO ];then
		TO="all"
	else
		TO=`decode_name $TO`
	fi

	# handle receiver device filter (if set in config)
	if [[ -z $target_filter ||  "$target_filter" == "$TO" || "$TO" == all ]];then
		TYPE=`j_push $ENTRY -e type|tr -d \"`
		if [ -z `j_push $ENTRY -e source_device_iden` ];then
			FROM=$(decode_name `j_push $ENTRY -e sender_name |tr -d \"`)
		else
			FROM=$(decode_name `j_push $ENTRY -e source_device_iden |tr -d \"`)
		fi
		MSG=`j_push $ENTRY | egrep 'title|body|file_url|\"url'|cut -d \" -f4`

		killall notify-osd 2>/dev/null
		notify-send "${TYPE} : from ${FROM} to ${TO}" "$MSG"
		( echo "FROM $FROM TO $TO" ; eval echo  \\ \\ $MSG ) > ~/.bashbullet/received/${TIME}_`echo $TO|tr -d ' '`_${TYPE}
	fi
}

# Get all messages in the past 15 seconds and only display new ones
get_last_15sec_msg(){
	RAWMSG=`CL pushes?modified_after=$1`

	# handling multiple events within a second problem
	CNT=`jshon -e pushes <<< "$RAWMSG"|grep \"created\"|wc -l`
	for(( ENTRY=0 ; ENTRY < $CNT ; ENTRY++ ));do
		if [ `j_push $ENTRY -e dismissed` == "false" ];then
			TIME=`j_push $ENTRY -e created`
			if [ ! -f ~/.bashbullet/received/${TIME}* ];then
				disp_save
			fi
		fi
	done
}

## Monitoring websocket for push event
tickle_detect(){
	while true ; do
	    if read line; then
		if grep tickle <<< $line >/dev/null 2>/dev/null;then
			get_last_15sec_msg `date --date="-15sec" +%s`
			echo icon:mail-unread > $PIPE
		fi
	    fi
	done
}

DEVS_RAW=`CL devices`
DEVS=(`jshon -e devices <<< "$DEVS_RAW"|grep \"nickname\"|cut -d \" -f4`)
IDEN=(`jshon -e devices <<< "$DEVS_RAW"|grep \"iden\"|cut -d \" -f4`)

if [ `find ${HOME}/.bashbullet/received/*_* 2>/dev/null|wc -l` != 0 ];then
	echo icon:mail-unread > $PIPE
fi


wscat -c wss://websocket.pushbullet.com/subscribe/$API_KEY|tickle_detect
