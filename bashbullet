#!/bin/bash

# Bashbullet	: a pushbullet systray notification daemon for linux. also a simple client to receive, mirror and send pushes
# Author	: Boteium - https://github.com/Boteium

# running in the background parameter
export DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
[[ ! -z "$1" && "$1" == '-scr' ]] && screen -S bashbullet-session -dm $DIR/bashbullet && exit

# display warning message
if ! ps -o stat= -p $$ |grep + >/dev/null;then
notify-send Warning "Bashbullet is running in the background
Make sure to start it by screen/systemd/upstart or it will not work
e.g. screen -S bashbullet-session -dm ./bashbullet"
fi

# check dependencies
for i in yad wscat jshon notify-send;do
	if ! [ `whereis -b $i|cut -d ':' -f2` ];then
		echo command $i not found, please install it and try again && exit 0
	fi
done

# Read Configration file
[ ! -x ~/.bashbullet/received/archived ] && mkdir -p ~/.bashbullet/received/archived
if [ -f ~/.bashbullet/config ];then
	source ~/.bashbullet/config
	[ -z $API_KEY ] && API_KEY=$access_token
	[ ! -f ~/.bashbullet/.last_timestamp ] && date +%s > ~/.bashbullet/.last_timestamp
	LASTTIME=`cat ~/.bashbullet/.last_timestamp`
	for i in disable_sms xdg-open cp_link allow_file_shorten;do
		eval test -z \$$i && declare $i=false
	done
	targets=0
	while(( 1 ));do
		eval test -z \"\${target_filter_$targets}\" && break
		eval test -z \"\${skip_$targets}\" && declare skip_$targets=false
		let targets++
	done
	if [ -f /usr/share/bashbullet/pushbullet.svg ];then
		export SRC='/usr/share/bashbullet'
	else
		export SRC="$DIR"
	fi
else
	echo please put your API_KEY=\"your_key\" in ~/.bashbullet/config
	echo see /usr/share/bashbullet/config_example for configuration guide
	exit 0
fi

# nodejs path
if [[ ! -z $my_key && -z $NODE_PATH ]];then
	export NODE_PATH=$(npm root -g)
fi

# initialize yad systray icon
export PIPE=`mktemp -u --tmpdir ${0##*/}.XXXXXXXX`
mkfifo $PIPE

# attach a file descriptor to the file
exec 3<> $PIPE

# add handler to manage process shutdown
on_exit() {
    echo "quit" >&3
    rm -f $PIPE
}
trap on_exit EXIT

# simple client for sending pushes to phone
new_push(){
	IFS=$'\n'
	source ~/.bashbullet/config
	[ -z $API_KEY ] && API_KEY=$access_token
	DEVS_RAW=`cat ~/.bashbullet/.devcache`
	SMSDEV=(`jshon -e devices <<< "$DEVS_RAW"|grep 'active": true' -A 14|grep has_sms -B8|grep '"nickname"'|cut -d \" -f4`)
	DEVS=(`jshon -e devices <<< "$DEVS_RAW"|grep \"nickname\"|cut -d \" -f4`)
	IDEN=(`jshon -e devices <<< "$DEVS_RAW"|grep -A1 'active": true'|grep \"iden\"|cut -d \" -f4`)
        PU(){
		_ME=`decode_identity bashbullet`
		if curl -s --header "Access-Token: $API_KEY" -X POST https://api.pushbullet.com/v2/pushes \
			--header "Content-Type: application/json" \
			--data-binary '{"source_device_iden":"'"$_ME"'", "device_iden":"'"$1"'", "type": "'"$2"'", "title": "'"$3"'", "body": "'$4'"}' |\
		grep 'active":true' >/dev/null;then notify-send -t 1000 "pushed";fi
        }
        decode_identity(){
                for(( i=0 ; i<${#IDEN[@]} ; i++ ));do
                        if [ "$1" == "${DEVS[$i]}" ];then
                                echo "${IDEN[$i]}"
                                return 0;
                        fi
                done
        }
	# generate yad readable list
        DEVICES=`for i in ${DEVS[@]};do echo -n \;$i;done|cut -c 2-`
	SMSDEVICE=`for i in ${SMSDEV[@]};do echo -n \;$i;done|cut -c 2-`

	YADPKEY=${RANDOM}
	_p_note=$(mktemp --tmpdir push.note.XXXXXX)
	_p_sms=$(mktemp --tmpdir push.sms.XXXXXX)
	_p_file=$(mktemp --tmpdir push.file.XXXXXX)

        yad --form --field="Send to":CB "${DEVICES}" \
        	--field="Title" "" --field="Note":TXT "" --item-separator=';' \
		--plug=$YADPKEY --tabnum=1 > $_p_note &

        yad --form --field="Send to":CB "${DEVICES}" --item-separator=';' \
		--plug=$YADPKEY --tabnum=2 > $_p_file &

        yad --form --field="Sent SMS from":CB "${SMSDEVICE}" \
 		--field="to phone number" "" --field="Note":TXT "" --item-separator=';' \
		--plug=$YADPKEY --tabnum=3 > $_p_sms &

        IFS='|'
        yad --notebook --key=$YADPKEY --mouse --title "Bashbullet :: new push"  --height=300 --width=400 \
                --window-icon="${SRC}/pushbullet.svg" --button="Discard:1" --button="Send:2" \
		--tab="Push" --tab="File" --tab="SMS"

	if [ $? == 2 ] ;then
		SMS=(`cat $_p_sms`)
		FILE=(`cat $_p_file`)
		NOTE=(`cat $_p_note`)
                if [ ! -z "${SMS[1]}" ];then
			ME=`decode_identity bashbullet`
			curl --header "Access-Token: $API_KEY" -X POST https://api.pushbullet.com/v2/ephemerals \
			--header "Content-Type: application/json" --data-binary \
			'{"type": "push", "push": {"type":"messaging_extension_reply","package_name":"com.pushbullet.android","source_user_iden":"'$ME'","target_device_iden":"'`decode_identity ${SMS[0]}`'","conversation_iden":"'${SMS[1]}'","message":"'"${SMS[2]}"'"}}'
		elif [[ ! -z "${NOTE[1]}" || ! -z "${NOTE[2]}" ]];then
			[ -z ${NOTE[1]} ] && NOTE[1]="untitled"
                	PU `decode_identity "${NOTE[0]}"`  note "${NOTE[1]}" "${NOTE[2]}"
		else
			FN=`yad --file --width=550 --height=400 --title "Send a file to ${FILE[0]}"`
			FNAME=`sed 's/.*\///g' <<< $FN`
			if echo $FNAME|egrep -i 'png|jpg|jpeg|gif' >/dev/null ;then
				mime=image/`sed -e 's/.*\.//' <<< $FNAME|tr [:upper:] [:lower:]`
			else
				mime=application/octet-stream
			fi
			notify-send "Uploading..., please wait" "Sending $FN to ${FILE[0]}"
			RAW=`curl -s --header "Access-Token: $API_KEY" -X POST https://api.pushbullet.com/v2/upload-request -d file_name="$FNAME" -d file_type=$mime`
			FURL=`jshon -e file_url <<< $RAW|tr -d '\'|tr -d '"'`
			UURL=`jshon -e upload_url <<< $RAW|tr -d '\'|tr -d '"'`
			ARGS=`jshon -e data <<< $RAW|grep :|sed -e 's/["| |,]//g' -e 's/^/-F /'|tr : =`
			if curl -s -i -X POST $UURL $ARGS -F file=@"${FN}" |grep 'No Content' >/dev/null;then
				PU `decode_identity ${FILE[0]}` file "$FNAME" "$FURL"
			fi
		fi
	fi

	rm "$_p_note" "$_p_sms" "$_p_file" 2>/dev/null
}
export -f new_push

# add handler for tray icon left click
on_click() {
	if ps -ef|grep -e yad |grep disp_tmp >/dev/null;then
		echo duplicated inbox window.
		return 0
	fi

	YADKEY=${RANDOM}

	# aggregate all messages and sort by received time
	if [ "`ls ${HOME}/.bashbullet/received/*_* 2>/dev/null`" ];then
		( tac ${HOME}/.bashbullet/received/*_*|sed -e 's/^  / _-|/g' -e 's/^FROM/  --- From/g'|\
		tr -d '\n'|sed 's/ _-|/\n/g' ;printf '\n')|tac > ${HOME}/.bashbullet/.disp_tmp
	else
		echo "No new messages" > ${HOME}/.bashbullet/.disp_tmp
	fi
	if [ "`ls ${HOME}/.bashbullet/received/archived/`" ];then
		( tac ${HOME}/.bashbullet/received/archived/*_*|sed -e 's/^  / _-|/g' -e 's/^FROM/  --- From/g'|\
                tr -d '\n'|sed 's/ _-|/\n/g' ;printf '\n')|sed -e '/^$/d'|tac > ${HOME}/.bashbullet/.arch_tmp
		tac ${HOME}/.bashbullet/received/archived/OldArchive.txt >> ${HOME}/.bashbullet/.arch_tmp 2>/dev/null
	else
		echo "No archived messages" > ${HOME}/.bashbullet/.arch_tmp
	fi

	# generate yad tab
	yad --plug=$YADKEY --tabnum=1 --text-info --filename=${HOME}/.bashbullet/.disp_tmp &
	yad --plug=$YADKEY --tabnum=2 --text-info --filename=${HOME}/.bashbullet/.arch_tmp &

	yad --mouse --notebook --key=$YADKEY --width=600 --height=400 --title "Bashbullet Inbox" \
		--window-icon="${SRC}/pushbullet.svg" --tab="New Messages" --tab="Archived Messages" --title "Bashbullet Inbox" \
		--button "Close:1" --button "Mark all as read:2" --button "Archive all:3" --button "New push:4"
	case  $? in
		2)
		echo icon:"${SRC}/pushbullet.svg" > ${PIPE} ;;
		3)
		rm ${HOME}/.bashbullet/received/archived/*_* 2>/dev/null
		tac ${HOME}/.bashbullet/.arch_tmp  > ${HOME}/.bashbullet/received/archived/OldArchive.txt
		mv ${HOME}/.bashbullet/received/*_* ${HOME}/.bashbullet/received/archived/
		echo icon:"${SRC}/pushbullet.svg" > ${PIPE} ;;
		4)
		new_push
		;;
	esac
	find ~/.bashbullet/received/*dismissed* -type f -cmin +5 -delete 2>/dev/null &
}
export -f on_click

# create yad notification icon
yad --notification --title bashbullet --listen \
    --image="$SRC/pushbullet.svg" \
    --text="click to display new message" \
    --command="bash -c \"on_click\"" <&3 &

IFS=$'\n'
[ -z $DISPLAY ] && DISPLAY=:0

# Pushbullet api url
CL(){   curl -s -X GET --header "Access-Token: $API_KEY" https://api.pushbullet.com/v2/${1} ;}

# Convert device id to name
decode_name(){
	for(( i=0 ; i<${#DEVS[@]} ; i++ ));do
		if [ $1 == ${IDEN[$i]} ];then
			echo "${DEVS[$i]}"
			return 0;
		fi
	done
}

# extract push from json
j_push(){ jshon -e pushes -e $@ <<< "$RAWMSG" ;}

mirrored(){
	# use sed instead of jshon to parse
	TYPE=`sed -e 's/.*type":"//g' -e 's/",".*//g' <<< $line`
	FROM=$(decode_name `sed -e 's/.*source_device_iden":"//g' -e 's/".*//g' <<< $line`)
	TITLE=`sed -e 's/.*title":"//g' -e 's/",".*//g' <<< $line`
	BODY=`sed -e 's/.*body":"//g' -e 's/",".*//g' -e 's/"}$//' -e 's/"}.*//' <<< $line`
	APP=`sed -e 's/.*application_name":"//g' -e 's/",".*//g' <<< $line`

	# only support copy link from phone's clipboard to PC
	# PC to phone's clipboard not yet supported
	if [ $TYPE == clip ];then
		printf $BODY|tr -d '\'|xclip -sel clip
		notify-send -t 5000 "text copied from :: $FROM" "$BODY"
	else
		ICO=`echo  $line|sed -e 's/.*icon":"//g' -e 's/"}.*//g'`
		ICON=`mktemp -u --tmpdir ${0##*/}.ico.XXXXXXXX`
		echo -e $ICO |tr -d '\n' |tr -d '\' 2>/dev/null|base64 -d > $ICON
	 	if [ ! -z $ICONFORMAT ];then
	 		eval convert "$ICON" $ICONSIZE "$ICON${ICONFORMAT}"
	 	fi
	 	if [ ! -z "$mirror_command" ];then
			eval "$mirror_command"
		else
			# use printf to display special character (e.g. \n). use sed to prevent 'printf *' being interpreted as 'ls'
		 	notify-send -t 5000 -a "$APP" -i ${ICON}${ICONFORMAT} "$APP $FROM :: $TITLE" "$(printf "`sed 's/\*/\\\*/g' <<< "$BODY"`")"
		fi
	        ( sleep 10; rm ${ICON}* ) &
	fi
	[ ! -z DING_MIRROR ] && eval $DING_MIRROR &
}
save(){
	( eval echo "\ $FROM \>\> $TO"
	  echo  \ \ ${TYPE}:: $URL $MSG ) > ~/.bashbullet/received/${TIME}_`echo $TO|tr -d ' '`_${TYPE}
	echo icon:mail-unread > $PIPE
	[ ! -z $DING ] && eval $DING
}

# notify-send and save
disp_save(){
	TYPE=`j_push $ENTRY -e type|tr -d \"`
	if [ -z `j_push $ENTRY -e source_device_iden` ];then
		FROM=`j_push $ENTRY -e sender_name |tr -d \"`
	else
		FROM=$(decode_name `j_push $ENTRY -e source_device_iden |tr -d \"`)
	fi
	MSG=$(eval echo `j_push $ENTRY | egrep 'title|body'|cut -d : -f2-`)
	URL=$(eval echo `j_push $ENTRY | egrep '_url|\"url'|cut -d : -f2-`)
	if [[ $cp_link == true && ! -z "$URL" ]];then
		eval echo "$URL"|xclip -sel clip
	fi
	if [[  $allow_file_shorten == "true" || $TYPE != file ]];then
		[ ! -z "$SHORT_URL" ] && URL=`eval echo "$URL"|eval $SHORT_URL`
	fi
	if eval test -z \"\$custom_command_$j\" ;then
		[[ $xdg-open == true && ! -z "$URL" ]] && xdg-open "$URL"
		notify-send -t 7000 "${TYPE} : ${FROM} >> ${TO}" "$URL $MSG"
	else
		eval eval \$custom_command_$j &
	fi
	if eval test \"\${skip_$j}\" == "false" ;then
		save
	else
		touch ~/.bashbullet/received/${TIME}_`echo $TO|tr -d ' '`_dismissed
	fi
}

# handle device filter
device_filter(){
	TO=`jshon -e pushes -e $ENTRY -e target_device_iden <<< "$RAWMSG" 2>/dev/null|tr -d \"`
	if [ -z $TO ];then
		TO="all"
	else
		TO=`decode_name $TO`
	fi

	# handle receiver device filter (if set in config)
	if [[  $targets == 0 || "$TO" == all ]];then
		j=NAN; disp_save
	else
		for((j=0; j<$targets ;j++));do
			eval test \"$TO\" == \"\${target_filter_$j}\" && disp_save
		done
	fi
}

# Retrieve pushes after "$1" time
get_msg(){
	RAWMSG=`CL pushes?modified_after=$1`

	CNT=`jshon -e pushes <<< "$RAWMSG"|grep \"created\"|wc -l`
	for(( ENTRY=0 ; ENTRY < $CNT ; ENTRY++ ));do
		# check if push is "active" and "not dismissed"
		# will disable dismissed checking (controled by $2 parameter) if it is retriving
		# pushes from the past, and enable checking if it is retriving new pushes
		if [ `j_push $ENTRY -e active` == "true" ];then
			if [[ "$2" == 'dont_care' || `j_push $ENTRY -e dismissed` == 'false' ]];then
				TIME=`j_push $ENTRY -e created`
				if [ ! -f ~/.bashbullet/received/${TIME}* ];then
					device_filter
				fi
			fi
		fi
	done
}

## Monitoring websocket for push event
tickle_detect(){
	while true ; do
	    if read -r line; then
		if grep push <<< $line >/dev/null 2>/dev/null;then
			if grep 'push":{"encrypted' <<< $line >/dev/null 2>/dev/null;then
				if [ -z $my_key ];then
					notify-send "Bashbullet Warning" "Mirror notification is encrypted, please put your key in ~/.bashbullet/config or it won't work"
				else
					line=$(printf `sed -e 's/.*ciphertext":"//' -e 's/"}}.*//g' <<< $line`|tr -d '\'|tr -d '\n')
					line=`$SRC/dec.js $my_key "$line"`

					if ! echo "$line" |grep '"type":"dismissal"' >/dev/null 2>/dev/null ;then
						mirrored
					fi
				fi
			elif grep -e 'type":"mirror' -e 'type":"clip' <<< $line >/dev/null 2>/dev/null;then
				mirrored
			elif grep 'type":"sms_changed' <<< $line >/dev/null 2>/dev/null;then
			    if [ $disable_sms == false ];then
				# suppress SMS notification to one within 30 seconds
				# SMS Sync is unsupported, but limited notification can be acheived.
				[ -z $SMSTIMESTAMP ] && SMSTIMESTAMP=`date --date="-16sec" +%s`
				if [  $[`date +%s`-$SMSTIMESTAMP] -gt 15 ];then
					FROM=$(decode_name `sed -e 's/.*source_device_iden":"//g' -e 's/".*//g'  <<< $line`)
					notify-send "$FROM :: SMS sent/received" "`date +%r`"
				fi
				SMSTIMESTAMP=`date +%s`
			    fi
			else
				get_msg `date --date="-15sec" +%s` check_dismissed
			fi
			date +%s > ~/.bashbullet/.last_timestamp
		fi
	    else
		echo wscat dies  && break
	    fi
	done
}

DEVS_RAW=`CL devices`
echo $DEVS_RAW > ~/.bashbullet/.devcache

DEVS=(`jshon -e devices <<< "$DEVS_RAW"|grep \"nickname\"|cut -d \" -f4`)
IDEN=(`jshon -e devices <<< "$DEVS_RAW"|grep -A1 'active": true'|grep \"iden\"|cut -d \" -f4`)


# create bashbullet devices
if ! echo "${DEVS[@]}"|grep bashbullet >/dev/null;then
	curl --header "Access-Token: $API_KEY" -X POST https://api.pushbullet.com/v2/devices \
		-d nickname=bashbullet -d type=opera
fi

if [ "`ls ${HOME}/.bashbullet/received/*_* 2>/dev/null`" ];then
	echo icon:mail-unread > $PIPE
fi

get_msg $LASTTIME dont_care
date +%s > ~/.bashbullet/.last_timestamp

# wscat
wscat -c wss://websocket.pushbullet.com/subscribe/$API_KEY|tickle_detect
