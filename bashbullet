#!/bin/bash

# Bashbullet	: a simple pushbullet notification daemon for linux users written in bash
# Author	: Boteium - https://github.com/Boteium
# Description	: notifications are displayed through notify-osd.
# 		  received pushes would be saved at ~/.pushbullet/received with timestamp and type of push as filename


# API_KEY Configration file
if [ -f ~/.bashbullet/config ];then
	source ~/.bashbullet/config
else
	mkdir -p ~/.bashbullet/received
	echo please put your API_KEY=\"your_key\" in ~/.bashbullet/config
	exit 0
fi

IFS='
'

# Pushbullet api url
CL(){   curl -s --header "Authorization: Bearer $API_KEY" https://api.pushbullet.com/v2/${1} ;}

# Convert device id to name
decode_name(){
	for(( i=0 ; i<${#DEVS[@]} ; i++ ));do
		if [ $1 == ${IDEN[$i]} ];then
			echo "${DEVS[$i]}"
			return 0;
		fi
	done
}

# extract push from json
j_push(){ jshon -e pushes -e $@ <<< "$RAWMSG" ;}

# notify-send and save
disp_save(){
	TO=`jshon -e pushes -e $ENTRY -e target_device_iden <<< "$RAWMSG" 2>/dev/null|tr -d \"`
	if [ -z $TO ];then
		TO="all"
	else
		TO=`decode_name $TO`
	fi

	# handle receiver device filter (if set in config)
	if [[ -z $target_filter ||  "$target_filter" == "$TO" || "$TO" == all ]];then
		TYPE=`j_push $ENTRY -e type|tr -d \"`
		FROM=$(decode_name `j_push $ENTRY -e source_device_iden |tr -d \"`)
		MSG=`j_push $ENTRY | egrep 'title|body|file_url|\"url'|cut -d \" -f4|sed 1q`

		killall notify-osd 2>/dev/null
		notify-send "${TYPE} : from ${FROM} to ${TO}" "$MSG"
		TO=`echo $TO|tr -d ' '`
		( echo "FROM $FROM" ; echo  "$MSG" ) >> ~/.bashbullet/received/${TIME}_${TO}_${TYPE}
	fi
}

# Get all messages in the past 15 seconds and display new ones
get_last_15sec_msg(){
	RAWMSG=`CL pushes?modified_after=$1`
	echo "$RAWMSG" > /tmp/rawmsg

	# handling multiple events within a second problem
	CNT=`jshon -e pushes <<< "$RAWMSG"|grep \"created\"|wc -l`
	for(( ENTRY=0 ; ENTRY < $CNT ; ENTRY++ ));do
		if [ `j_push $ENTRY -e dismissed` == "false" ];then
			TIME=`j_push $ENTRY -e created`
			if [ ! -f ~/.bashbullet/received/${TIME}* ];then
				disp_save
			fi
		fi
	done
}

## Monitoring websocket for push event
tickle_detect(){
	while true ; do
	    if read line; then
		if grep tickle <<< $line >/dev/null 2>/dev/null;then
			get_last_15sec_msg `date --date="-15sec" +%s`
		fi
	    fi
	done
}

DEVS_RAW=`CL devices`
DEVS=(`jshon -e devices <<< "$DEVS_RAW"|grep \"nickname\"|cut -d \" -f4`)
IDEN=(`jshon -e devices <<< "$DEVS_RAW"|grep \"iden\"|cut -d \" -f4`)

wscat -c wss://websocket.pushbullet.com/subscribe/$API_KEY|tickle_detect
